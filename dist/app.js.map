{"version":3,"sources":["app.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_s","_e","_arr","_n","_d","next","done","push","value","err","isArray","userChoice","userChoiceValue","userChoiceResults","userChoiceDisplay","document","getElementById","computerChoiceDisplay","resultDisplay","dataScoreSpanUser","querySelector","dataScoreSpanComputer","roundsSelections","btnPossibleChoices","querySelectorAll","choices","gameType","image","index","key","type","tieAllImage","winUserImage","winComputerImage","winAll","concat","winUser","winComputer","computerChoice","randomChoiceNumber","Math","random","floor","fetchUserChoice","forEach","choice","includes","userChoiceIndex","addScoreUpdate","dataScoreSpan","textContent","parseInt","roundResultInsert","createElement","roundResult","computerChoiceIndex","choiceIndexComputerWins","appendChild","playRound","userChoicePara","computerChoicePara","computerChoices","computerChoiceResults","classList","add","insertBefore","firstChild","resetGame","_ref2","disableBtnPossibleChoices","btnPossibleChoice","disabled","scoreToWin","Number","delayResetGameTimeOut","setTimeout","console","log","roundResultInsertWinGameUser","roundResultInsertWinGameComputer","addEventListener","e","target","dataScoreSpanInnerTextUser","innerText","dataScoreSpanInnerTextComputer","scoreFinalUser","scoreFinalComputer","winGameComputer"],"mappings":"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","file":"app.js","sourcesContent":["/* eslint-disable no-console */\n/* $ ./node_modules/.bin/eslint --fix src/js/app.js */\n\n/* declare and initialize const variables => always const before let */\n// get DOM elements by id\nconst userChoiceDisplay = document.getElementById('userChoiceDisplay');\nconst computerChoiceDisplay = document.getElementById('computerChoiceDisplay');\nconst resultDisplay = document.getElementById('resultDisplay');\nconst dataScoreSpanUser = document.querySelector('[data-user-score]');\nconst dataScoreSpanComputer = document.querySelector('[data-computer-score]');\n\nconst roundsSelections = document.getElementById('roundsSelections');\n// select all buttons with class of buttonChoice\nconst btnPossibleChoices = document.querySelectorAll('.buttonChoice');\n// console.dir(btnPossibleChoices);\n\n/* set btnPossibleChoices.length when !type: \"traditional\" */\n// choices array to store all possible choices\nconst choices = [\n  {\n    name: 'rock',\n    gameType: ['twoPlayer'],\n    image: '‚úä',\n    index: 0,\n    key: 'a',\n    type: 'traditional',\n    value: 'rock',\n  },\n  {\n    name: 'paper',\n    gameType: ['twoPlayer'],\n    image: '‚úã',\n    index: 1,\n    key: 's',\n    type: 'traditional',\n    value: 'paper',\n  },\n  {\n    name: 'scissors',\n    gameType: ['twoPlayer'],\n    image: '‚úåÔ∏è',\n    index: 2,\n    key: 'd',\n    type: 'traditional',\n    value: 'scissors',\n  },\n];\n\n// set result statement\nconst tieAllImage = 'ü§ù'; /* https://emojipedia.org/heart-hands/ */\nconst winUserImage = '‚ú®';\nconst winComputerImage = 'üî•';\nconst winAll = `${tieAllImage} It's a Tie!`;\nconst winUser = `${winUserImage} You Won!`;\nconst winComputer = `${winComputerImage} Bot Won!`;\n\n// * array of possible result statements\n// const resultStatements = [\n//   {\n//     name: winUser,\n//     beats: [1, 2],\n//     class: 'win',\n//     gameType: 'twoPlayer',\n//     image: '<img src=\"images/win.png\" alt=\"win\">',\n//     index: 0,\n//     type: ['traditional'],\n//     value: 1,\n//     who: 'user',\n//   },\n//   {\n//     name: winComputer,\n//     beats: [0, 2],\n//     class: 'lose',\n//     gameType: 'twoPlayer',\n//     image: '<img src=\"images/lose.png\" alt=\"lose\">',\n//     index: 1,\n//     type: ['traditional'],\n//     value: -1,\n//     who: 'computer',\n//   },\n//   {\n//     name: winAll,\n//     beats: [0, 1, 2],\n//     class: 'tie',\n//     gameType: 'twoPlayer',\n//     image: '<img src=\"images/tie.png\" alt=\"tie\">',\n//     index: 2,\n//     type: ['traditional'],\n//     value: 0,\n//     who: 'tie',\n//   },\n// ];\n\n// declare `let` variables\nlet userChoice; /* \"temporal dead zone\" (TDZ) */\nlet userChoiceValue;\nlet userChoiceResults;\n\n// -----------------------------------------------------------------------------\n\n/* 3 buttons, Math.floor() returns Math.random() to the nearest +ve integer */\n// * Function to generate computer's random integer => 0<= i <=2\nconst computerChoice = () => {\n  const randomNumber = Math.random();\n  const numberOfButtons = btnPossibleChoices.length;\n  const randomChoiceNumber = randomNumber * numberOfButtons;\n  const randomChoice = Math.floor(randomChoiceNumber);\n\n  return randomChoice;\n};\n\n// * Function to Filter choices array by user's choice\nconst fetchUserChoice = () => {\n  choices.forEach((choice) => {\n    if (userChoiceValue.includes(choice.name || choice.key)) {\n      userChoice = choice.image;\n      const userChoiceIndex = choice.index;\n      userChoiceResults = [userChoice, userChoiceIndex];\n      return userChoiceResults;\n    }\n    return userChoiceResults;\n  });\n};\n\n// * Updates score with each win\nconst addScoreUpdate = (dataScoreSpan) => {\n  const addScoreUpdateProperty = dataScoreSpan;\n  addScoreUpdateProperty.textContent = parseInt(dataScoreSpan.textContent, 10) + 1;\n};\n\n// adds new paragraph choice emoji to DOM /* this can go at the top */\nconst roundResultInsert = document.createElement('p'); // create a new <p> element\n\n// convert to function\n/* const insertRoundResult = (roundResultInsert) => {\n  roundResultInsert.textContent = userChoice;\n  roundResultInsert.textContent = winAll;\n  resultDisplay.appendChild(roundResultInsert);\n}; */\n\n// * Declare result of a single round\nconst roundResult = (userChoiceIndex, computerChoiceIndex) => {\n  const choicesArrayLength = choices.length;\n  const choiceIndexIsSame = userChoiceIndex === computerChoiceIndex;\n  const choiceIndexUserModulo = (userChoiceIndex + 1) % choicesArrayLength;\n  const choiceIndexComputerWins = choiceIndexUserModulo === computerChoiceIndex;\n\n  if (choiceIndexIsSame) {\n    roundResultInsert.textContent = winAll;\n    resultDisplay.appendChild(roundResultInsert);\n    return 'tie';\n  }\n  if (choiceIndexComputerWins) {\n    roundResultInsert.textContent = winComputer;\n    resultDisplay.appendChild(roundResultInsert);\n    addScoreUpdate(dataScoreSpanComputer);\n    return 'computer';\n  }\n  if (!choiceIndexComputerWins) {\n    roundResultInsert.textContent = winUser;\n    resultDisplay.appendChild(roundResultInsert);\n    addScoreUpdate(dataScoreSpanUser);\n    return 'user';\n  }\n  return 'error';\n};\n\n// * Function => Adds a new round result to the DOM\n\nconst playRound = () => {\n  const userChoicePara = document.createElement('p');\n  const computerChoicePara = document.createElement('p');\n  // Run the random computer choice generator ONLY ONCE HERE\n  const computerChoices = choices[computerChoice()];\n  // Retrieve results & map to computer's random number with choices[] array\n  const computerChoiceResults = [computerChoices.image, computerChoices.index];\n  // Define the computer results image and index with choices[] array\n  const computerChoiceIndex = computerChoiceResults[1];\n  userChoicePara.textContent = userChoice;\n  userChoicePara.classList.add('card__choice-result__choice');\n  // add text content & classList 'card__choice-result__choice'\n  computerChoicePara.textContent = choices[computerChoiceIndex].image;\n  computerChoicePara.classList.add('card__choice-result__choice');\n  // Insert DOM result elements content <p> before the last <p>\n  userChoiceDisplay.insertBefore(userChoicePara, userChoiceDisplay.firstChild);\n  computerChoiceDisplay.insertBefore(\n    computerChoicePara,\n    computerChoiceDisplay.firstChild,\n  );\n  resultDisplay.textContent = `${userChoiceResults[0]} vs ${computerChoiceResults[0]}`;\n\n  return roundResult(userChoiceResults[1], computerChoiceResults[1]);\n};\n\n// * reset the game when <select> element roundSelections is changed\nconst resetGame = () => {\n  // remove the appended <p> elements\n  [\n    userChoiceDisplay.textContent,\n    computerChoiceDisplay.textContent,\n    resultDisplay.textContent,\n  ] = '';\n  dataScoreSpanUser.textContent = '0';\n  dataScoreSpanComputer.textContent = '0';\n  roundResultInsert.textContent = '';\n};\n\n// function to disable buttons\nfunction disableBtnPossibleChoices() {\n  btnPossibleChoices.forEach((btnPossibleChoice) => {\n    const btnToDisable = btnPossibleChoice;\n    btnToDisable.disabled = true;\n  });\n}\n\n// * scoreToWin for game to end\nlet scoreToWin = Number(roundsSelections.value);\n\n// get rounds value set by the user (default is 5)\nroundsSelections.addEventListener('change', (e) => {\n  scoreToWin = Number(e.target.value);\n  console.log('üöÄ ~ scoreToWin', scoreToWin);\n  resetGame();\n  return scoreToWin;\n});\n\n// Function to set timeout to resetGame()\nfunction delayResetGameTimeOut() {\n  setTimeout(() => {\n    resetGame();\n    console.log('Game was reseted');\n  }, 3000);\n}\n\nfunction roundResultInsertWinGameUser() {\n  roundResultInsert.textContent = winUser;\n}\n\nfunction roundResultInsertWinGameComputer() {\n  roundResultInsert.textContent = winComputer;\n}\n\n// * Function => grab the buttons & for each choice - listen to event\nbtnPossibleChoices.forEach((btnPossibleChoice) => btnPossibleChoice.addEventListener('click', (e) => {\n  userChoiceValue = e.target.value; /* value || key */\n  fetchUserChoice(); /* filters the userChoice to match the choices array */\n  playRound(); /* creates DOM elements after fetching */\n\n  // game win conditions\n  const dataScoreSpanInnerTextUser = dataScoreSpanUser.innerText;\n  const dataScoreSpanInnerTextComputer = dataScoreSpanComputer.innerText;\n  const scoreFinalUser = Number(dataScoreSpanInnerTextUser);\n  const scoreFinalComputer = Number(dataScoreSpanInnerTextComputer);\n  const winGameUser = scoreFinalUser === scoreToWin;\n  const winGameComputer = scoreFinalComputer === scoreToWin;\n\n  // final winner if conditionals\n  if (winGameUser) {\n    roundResultInsertWinGameUser();\n    disableBtnPossibleChoices();\n    // resultDisplay.textContent = winUser;\n    delayResetGameTimeOut();\n  } else if (winGameComputer) {\n    roundResultInsertWinGameComputer();\n    disableBtnPossibleChoices();\n    // resultDisplay.textContent = winComputer;\n    roundResultInsert.textContent = winComputer;\n    delayResetGameTimeOut();\n  }\n  console.log(`user score: ${dataScoreSpanUser.innerText} computer score: ${dataScoreSpanComputer.innerText}`);\n  console.log('üöÄ ~ scoreFinalUser', scoreFinalUser);\n  console.log('üöÄ ~ scoreFinalComputer', scoreFinalComputer);\n  console.log('üöÄ ~ scoreToWin', scoreToWin);\n}));\n\n// const playGame = () => {\n//   const scoreFinalUser = Number(dataScoreSpanInnerTextUser);\n//   const scoreFinalComputer = Number(dataScoreSpanInnerTextComputer);\n//   console.log('üöÄ ~ scoreFinalUser', scoreFinalUser);\n//   console.log('üöÄ ~ scoreFinalComputer', scoreFinalComputer);\n//   console.log('üöÄ ~ scoreToWin', scoreToWin);\n//   // final winner if conditionals\n//   if (scoreFinalUser === scoreToWin) {\n//     console.log('üöÄ ~ (scoreFinalUser === scoreToWin)', (scoreFinalUser === scoreToWin));\n//     disableBtnPossibleChoices();\n//     resultDisplay.textContent = winUser;\n//     setTimeout(() => {\n//       resetGame();\n//     }, 3000);\n//   } else if (dataScoreSpanComputer.textContent === scoreToWin) {\n//     disableBtnPossibleChoices();\n//     resultDisplay.textContent = winComputer;\n//     setTimeout(() => {\n//       resetGame();\n//     }, 3000);\n//   } else {\n//     disableBtnPossibleChoices();\n//     resultDisplay.textContent = winAll;\n//     setTimeout(() => {\n//       resetGame();\n//     }, 3000);\n//   }\n// };\n// playGame();\n\n// reset game when rounds are over\n/* const roundsNumber = parseInt(rounds); const roundsArray = [];\n  for (let i = 0; i < roundsNumber; i++) {roundsArray.push playRound());} */\n\n// -----------------------------------------------------------------------------\n// 20220423192830\n// ! main.js version1\n// * function calls statements\n// function declareGameWinner() {\n//   const win = 'win';\n//   const lose = 'lose';\n//   const tie = 'tie';\n//   return [win, lose, tie];\n// }\n\n// game logic and plays 5 rounds of rock paper scissors\n// function game() {\n//   const scoreFinalUser = dataScoreSpanInnerTextUser;\n//   const scoreFinalComputer = dataScoreSpanInnerTextComputer;\n//   // eslint-disable-next-line no-console\n//   console.log('üöÄ ~ scoreFinalUser', scoreFinalUser);\n//   // eslint-disable-next-line no-console\n//   console.log('üöÄ ~ scoreFinalComputer', scoreFinalComputer);\n//   let round = 0;\n\n//   for (let i = 0; i < 5; i += 1) {\n//     const [userChoice, computerChoice] = fetchUserComputerSelection();\n//     const roundResult = playRound(userChoice, computerChoice);\n//     round += 1;\n//     const [win, lose, tie] = declareStatement();\n//     if (roundResult.includes(win)) {\n//       scoreFinalUser += 1;\n//     } else if (roundResult.includes(lose)) {\n//       scoreFinalComputer += 1;\n//     } else roundResult.includes(tie);\n//     console.log(`${gameRoundResult}`);\n//   }\n//   const successUser = `Game over! You succeeded!\n// \\nFinal score:\\nuserScore: ${scoreFinalUser} to scoreFinalComputer: ${scoreFinalComputer}`;\n//   const successComputer = `Game over! Computer succeeded!\\nFinal score:\n// \\nuserScore: ${scoreFinalUser} to scoreFinalComputer: ${scoreFinalComputer}`;\n//   const successUserComputer = `Game over! It's a tie! Everyone succeeded!\n//    \\nFinal score:\\nuserScore: ${scoreFinalUser} to scoreFinalComputer: ${scoreFinalComputer}`;\n\n//   if (scoreFinalUser > scoreFinalComputer) {\n//     resultDisplay.textContent = successUser;\n//   } else if (scoreFinalUser < scoreFinalComputer) {\n//     resultDisplay.textContent = successComputer;\n//   } else if (scoreFinalUser === scoreFinalComputer) {\n//     resultDisplay.textContent = successUserComputer;\n//   }\n//   return resultDisplay.textContent;\n// }\n\n// game();\n\n// restart game\n// function restartGame() {\n//   const promptMessageRestart = 'Would you like to play again? (y/n)';\n//   const reset = prompt(promptMessageRestart, 'y');\n//   if (reset === 'y') {\n//     game();\n//     restartGame(); /* prompts user again when game() ends 2nd time */\n//   } else {\n//     console.log('Thanks for playing!');\n//   }\n// }\n// restartGame();\n\n// function to play a game of round = rounds from user input in #roundsSelections\n// const game = () => {\n//   let round = 0;\n//   let scoreFinalUser = 0;\n//   let scoreFinalComputer = 0;\n//   for (let i = 0; i < 5; i++) {\n//     playRound();\n//     round++;\n//     if (round % 2 === 0) {\n//       scoreFinalUser++;\n//     } else {\n//       scoreFinalComputer++;\n//     }\n//   }\n// };\n\n// -----------------------------------------------------------------------------\n/* const computerChoiceResults = [\n        choices[computerChoice()].image,\n        choices[computerChoice()].index,\n      ]; */\n\n// const computerChoiceIndexResult = choices[computerChoice()].index;\n// const computerChoiceImageResult = choices[computerChoice()].image;\n\n// resultDisplay.insertBefore(roundResultInsert, resultDisplay.firstChild); /* **** */\n\n//  --------------------------------------------------------------------\n\n/* function game() {\n    const rounds = roundsSelections.value;\n    rounds = 3;\n    for (let i = 0; i < rounds; i++) {\n      playRound();\n    }\n  } */\n\n/* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#a_stricter_parse_function */\n/* function parseInt(string: string, radix?: number): number */\n/* if radix is not specified, it defaults to base 10 (decimal) else base 16 (hexadecimal) */\n/* A value between 2 and 36 that specifies the base of the number in string.\n    If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\n    All other strings are considered decimal. */\n"]}