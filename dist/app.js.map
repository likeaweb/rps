{"version":3,"sources":["app.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_s","_e","_arr","_n","_d","next","done","push","value","err","isArray","userChoice","userChoiceValue","userChoiceResults","keydownPossibleChoicesKey","userChoiceDisplay","document","getElementById","computerChoiceDisplay","resultDisplay","dataScoreSpanUser","querySelector","dataScoreSpanComputer","roundsSelections","btnPossibleChoices","querySelectorAll","delayResetGameTimeoutDuration","Number","choices","gameType","image","index","key","type","tieAllImage","winUserImage","winComputerImage","winAll","concat","winUser","winComputer","computerChoice","randomChoiceNumber","Math","random","floor","fetchUserChoice","forEach","choice","includes","userChoiceIndex","addScoreUpdate","dataScoreSpan","textContent","parseInt","roundResultInsert","createElement","roundResult","computerChoiceIndex","choiceIndexComputerWins","appendChild","playRound","userChoicePara","computerChoicePara","computerChoices","computerChoiceResults","classList","add","insertBefore","firstChild","btnDisableBtnPossibleChoices","btnPossibleChoice","disabled","btnEnableBtnPossibleChoices","countdownTimer","countdownTimerStartGame","setTimeout","resetGame","_ref2","scoreToWin","delayResetGameTimeOut","roundResultInsertWinGameUser","roundResultInsertWinGameComputer","addEventListener","e","target","dataScoreSpanInnerTextUser","innerText","dataScoreSpanInnerTextComputer","scoreFinalUser","winGameComputer","window","event","console","log"],"mappings":"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","file":"app.js","sourcesContent":["// console.log('Gloria In Excelsis Deo!');\n\n// ESLint run command /* $ `./node_modules/.bin/eslint --fix src/js/app.js` */\n\n/* declare and initialize const variables => always const before let */\n// get DOM elements by id\nconst userChoiceDisplay = document.getElementById('userChoiceDisplay');\nconst computerChoiceDisplay = document.getElementById('computerChoiceDisplay');\nconst resultDisplay = document.getElementById('resultDisplay');\nconst dataScoreSpanUser = document.querySelector('[data-user-score]');\nconst dataScoreSpanComputer = document.querySelector('[data-computer-score]');\n\nconst roundsSelections = document.getElementById('roundsSelections');\n// select all buttons with class of buttonChoice\nconst btnPossibleChoices = document.querySelectorAll('.buttonChoice'); // console.dir(btnPossibleChoices);\nconst delayResetGameTimeoutDuration = Number(3000); /* 3 seconds */\n\n/* set btnPossibleChoices.length when !type: \"traditional\" */\n// choices array to store all possible choices\nconst choices = [\n  {\n    name: 'rock',\n    gameType: ['twoPlayer'],\n    image: '‚úä',\n    index: 0,\n    key: 'a',\n    type: 'traditional',\n    value: 'rock',\n  },\n  {\n    name: 'paper',\n    gameType: ['twoPlayer'],\n    image: '‚úã',\n    index: 1,\n    key: 's',\n    type: 'traditional',\n    value: 'paper',\n  },\n  {\n    name: 'scissors',\n    gameType: ['twoPlayer'],\n    image: '‚úåÔ∏è',\n    index: 2,\n    key: 'd',\n    type: 'traditional',\n    value: 'scissors',\n  },\n];\n\n// set result statement\nconst tieAllImage = 'ü§ù'; /* https://emojipedia.org/heart-hands/ */\nconst winUserImage = '‚ú®';\nconst winComputerImage = 'üî•';\nconst winAll = `${tieAllImage} It's a Tie!`;\nconst winUser = `${winUserImage} You Won!`;\nconst winComputer = `${winComputerImage} Bot Won!`;\n\n// * array of possible result statements\n// const resultStatements = [\n//   {\n//     name: winUser,\n//     beats: [1, 2],\n//     class: 'win',\n//     gameType: 'twoPlayer',\n//     image: '<img src=\"images/win.png\" alt=\"win\">',\n//     index: 0,\n//     type: ['traditional'],\n//     value: 1,\n//     who: 'user',\n//   },\n//   {\n//     name: winComputer,\n//     beats: [0, 2],\n//     class: 'lose',\n//     gameType: 'twoPlayer',\n//     image: '<img src=\"images/lose.png\" alt=\"lose\">',\n//     index: 1,\n//     type: ['traditional'],\n//     value: -1,\n//     who: 'computer',\n//   },\n//   {\n//     name: winAll,\n//     beats: [0, 1, 2],\n//     class: 'tie',\n//     gameType: 'twoPlayer',\n//     image: '<img src=\"images/tie.png\" alt=\"tie\">',\n//     index: 2,\n//     type: ['traditional'],\n//     value: 0,\n//     who: 'tie',\n//   },\n// ];\n\n// declare `let` variables\nlet userChoice; /* \"temporal dead zone\" (TDZ) */\nlet userChoiceValue;\nlet userChoiceResults;\n\n// 'a' = rock, 's' = paper, 'd' = scissors\nlet keydownPossibleChoicesKey;\n\n// -----------------------------------------------------------------------------\n\n/* 3 buttons, Math.floor() returns Math.random() to the nearest +ve integer */\n// * Function to generate computer's random integer => 0<= i <=2\nconst computerChoice = () => {\n  const randomNumber = Math.random();\n  const numberOfButtons = btnPossibleChoices.length;\n  const randomChoiceNumber = randomNumber * numberOfButtons;\n  const randomChoice = Math.floor(randomChoiceNumber);\n\n  return randomChoice;\n};\n\n// * Function to Filter choices array by user's choice\nconst fetchUserChoice = () => {\n  // Functions listense to keydown or keyboard key presses\n\n  choices.forEach((choice) => {\n    if (userChoiceValue.includes(choice.name)) {\n      userChoice = choice.image;\n      const userChoiceIndex = choice.index;\n      userChoiceResults = [userChoice, userChoiceIndex];\n      return userChoiceResults;\n    }\n\n    return userChoiceResults;\n  });\n};\n\n// * Updates score with each win\nconst addScoreUpdate = (dataScoreSpan) => {\n  const addScoreUpdateProperty = dataScoreSpan;\n  addScoreUpdateProperty.textContent = parseInt(dataScoreSpan.textContent, 10) + 1;\n};\n\n// adds new paragraph choice emoji to DOM /* this can go at the top */\nconst roundResultInsert = document.createElement('p'); // create a new <p> element\n\n// convert to function\n/* const insertRoundResult = (roundResultInsert) => {\n  roundResultInsert.textContent = userChoice;\n  roundResultInsert.textContent = winAll;\n  resultDisplay.appendChild(roundResultInsert);\n}; */\n\n// * Declare result of a single round\nconst roundResult = (userChoiceIndex, computerChoiceIndex) => {\n  const choicesArrayLength = choices.length;\n  const choiceIndexIsSame = userChoiceIndex === computerChoiceIndex;\n  const choiceIndexUserModulo = (userChoiceIndex + 1) % choicesArrayLength;\n  const choiceIndexComputerWins = choiceIndexUserModulo === computerChoiceIndex;\n\n  if (choiceIndexIsSame) {\n    roundResultInsert.textContent = winAll;\n    resultDisplay.appendChild(roundResultInsert);\n    return 'tie';\n  }\n  if (choiceIndexComputerWins) {\n    roundResultInsert.textContent = winComputer;\n    resultDisplay.appendChild(roundResultInsert);\n    addScoreUpdate(dataScoreSpanComputer);\n    return 'computer';\n  }\n  if (!choiceIndexComputerWins) {\n    roundResultInsert.textContent = winUser;\n    resultDisplay.appendChild(roundResultInsert);\n    addScoreUpdate(dataScoreSpanUser);\n    return 'user';\n  }\n  return 'error';\n};\n\n// * Function => Adds a new round result to the DOM\nconst playRound = () => {\n  const userChoicePara = document.createElement('p');\n  const computerChoicePara = document.createElement('p');\n  // Run the random computer choice generator ONLY ONCE HERE\n  const computerChoices = choices[computerChoice()];\n  // Retrieve results & map to computer's random number with choices[] array\n  const computerChoiceResults = [computerChoices.image, computerChoices.index];\n  // Define the computer results image and index with choices[] array\n  const computerChoiceIndex = computerChoiceResults[1];\n  userChoicePara.textContent = userChoice;\n  userChoicePara.classList.add('card__choice-result__choice');\n  // add text content & classList 'card__choice-result__choice'\n  computerChoicePara.textContent = choices[computerChoiceIndex].image;\n  computerChoicePara.classList.add('card__choice-result__choice');\n  // Insert DOM result elements content <p> before the last <p>\n  userChoiceDisplay.insertBefore(userChoicePara, userChoiceDisplay.firstChild);\n  computerChoiceDisplay.insertBefore(\n    computerChoicePara,\n    computerChoiceDisplay.firstChild,\n  );\n  resultDisplay.textContent = `${userChoiceResults[0]} vs ${computerChoiceResults[0]}`;\n\n  return roundResult(userChoiceResults[1], computerChoiceResults[1]);\n};\n\n// function to disable buttons when game is over\nfunction btnDisableBtnPossibleChoices() {\n  btnPossibleChoices.forEach((btnPossibleChoice) => {\n    const btnToDisable = btnPossibleChoice;\n    btnToDisable.disabled = true;\n  });\n}\n\n// function enables buttons after resetGame()\nfunction btnEnableBtnPossibleChoices() {\n  btnPossibleChoices.forEach((btnPossibleChoice) => {\n    const btnToEnable = btnPossibleChoice;\n    btnToEnable.disabled = false;\n  });\n}\n\n// Function displays the user when the next game will begin\n// It enables the disabled button choices again (avoids spamming)\nconst countdownTimer = () => {\n  const countdownTimerStartGame = document.createElement('p');\n  countdownTimerStartGame.textContent = '3';\n  countdownTimerStartGame.classList.add('countdownTimerStartGame');\n  resultDisplay.appendChild(countdownTimerStartGame);\n  setTimeout(() => {\n    countdownTimerStartGame.textContent = '2';\n  }, 1000);\n  setTimeout(() => {\n    countdownTimerStartGame.textContent = '1';\n  }, 2000);\n  setTimeout(() => {\n    countdownTimerStartGame.textContent = 'GO!';\n  }, 3000);\n  setTimeout(() => {\n    countdownTimerStartGame.textContent = '';\n  }, 4000);\n  setTimeout(() => {\n    btnEnableBtnPossibleChoices(); // enables the disabled button choices again\n  }, 5000);\n};\n\n// * reset the game when <select> element roundSelections is changed\nconst resetGame = () => {\n  [\n    userChoiceDisplay.textContent,\n    computerChoiceDisplay.textContent,\n    resultDisplay.textContent,\n  ] = ''; // reset the appended <p> elements content\n  dataScoreSpanUser.textContent = '0';\n  dataScoreSpanComputer.textContent = '0';\n  // add a countdown countdownTimerStartGame\n  // Count as the Game restarts again\n  roundResultInsert.textContent = '';\n  // countdownTimerToResetGame();\n  countdownTimer();\n};\n\n// * scoreToWin for game to end\nlet scoreToWin = Number(roundsSelections.value);\n\n// get rounds value set by the user (default is 5)\nroundsSelections.addEventListener('change', (e) => {\n  scoreToWin = Number(e.target.value);\n\n  resetGame();\n  return scoreToWin;\n});\n\n// Function to set timeout to resetGame()\nfunction delayResetGameTimeOut() {\n  setTimeout(() => {\n    resetGame();\n  }, delayResetGameTimeoutDuration);\n}\n\n// Function to insert result when user wins\nfunction roundResultInsertWinGameUser() {\n  roundResultInsert.textContent = winUser;\n}\n\n// Function to insert result when computer wins\nfunction roundResultInsertWinGameComputer() {\n  roundResultInsert.textContent = winComputer;\n}\n\n// * Function => grab the buttons & for each choice - listen to event\nbtnPossibleChoices.forEach((btnPossibleChoice) => btnPossibleChoice.addEventListener('click', (e) => {\n  userChoiceValue = e.target.value; /* value || key */\n\n  fetchUserChoice(); /* filters the userChoice to match the choices array */\n  playRound(); /* creates DOM elements after fetching */\n\n  // game win conditions\n  const dataScoreSpanInnerTextUser = dataScoreSpanUser.innerText;\n  const dataScoreSpanInnerTextComputer = dataScoreSpanComputer.innerText;\n  const scoreFinalUser = Number(dataScoreSpanInnerTextUser);\n  const scoreFinalComputer = Number(dataScoreSpanInnerTextComputer);\n  const winGameUser = scoreFinalUser === scoreToWin;\n  const winGameComputer = scoreFinalComputer === scoreToWin;\n\n  // * final winner ‚Äî if conditionals\n  if (winGameUser) {\n    roundResultInsertWinGameUser();\n    btnDisableBtnPossibleChoices();\n    // resultDisplay.textContent = winUser;\n    delayResetGameTimeOut();\n  } else if (winGameComputer) {\n    roundResultInsertWinGameComputer();\n    btnDisableBtnPossibleChoices();\n    // resultDisplay.textContent = winComputer;\n    roundResultInsert.textContent = winComputer;\n    delayResetGameTimeOut();\n  }\n}));\n\n// Event listener fetches keydown keyboard events\nwindow.addEventListener('keydown', (event) => {\n  keydownPossibleChoicesKey = event.key;\n\n  choices.forEach((choice) => {\n    if (keydownPossibleChoicesKey.includes(choice.key)) {\n      const userKeydownChoice = choice.key;\n      userChoice = choice.image;\n      const userChoiceIndex = choice.index;\n      userChoiceResults = [userChoice, userChoiceIndex];\n      console.log({ keydownPossibleChoicesKey });\n      return userChoiceResults;\n    }\n  });\n  return userChoiceResults;\n});\n"]}