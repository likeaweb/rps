{"version":3,"sources":["app.js"],"names":["userChoice","userChoiceValue","userChoiceResults","winUser","winComputer","winAll","userChoiceDisplay","document","getElementById","computerChoiceDisplay","resultDisplay","dataUserScoreSpan","querySelector","dataComputerScoreSpan","roundsSelections","btnPossibleChoices","querySelectorAll","choices","name","image","key","value","type","index","scoreToWin","computerChoice","randomNumber","Math","random","floor","length","fetchUserChoice","forEach","choice","includes","userChoiceIndex","console","log","roundResultInsert","createElement","addScoreUpdate","dataScoreSpan","textContent","parseInt","roundResult","computerChoiceIndex","appendChild","playRound","userChoicePara","computerChoicePara","computerChoices","computerChoiceResults","classList","add","insertBefore","firstChild","concat","resetGame","innerHTML","btnPossibleChoice","addEventListener","e","target","playGame","i"],"mappings":"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","file":"app.js","sourcesContent":["/* $ ./node_modules/.bin/eslint --fix src/js/app.js */\n\n/* declare and intialize const variables => always const before let */\n\n// set result statement\nconst winUser = 'You win';\nconst winComputer = 'Computer wins';\nconst winAll = \"It's a tie! Everyone Wins!\";\n/* const tieAllImage = '🫶 '; */ /* https://emojipedia.org/heart-hands/ */\n\n// get DOM elements by id\nconst userChoiceDisplay = document.getElementById('userChoiceDisplay');\nconst computerChoiceDisplay = document.getElementById('computerChoiceDisplay');\nconst resultDisplay = document.getElementById('resultDisplay');\nconst dataUserScoreSpan = document.querySelector('[data-user-score]');\nconst dataComputerScoreSpan = document.querySelector('[data-computer-score]');\n\nconst roundsSelections = document.getElementById('roundsSelections');\n// select all buttons with class of buttonChoice\nconst btnPossibleChoices = document.querySelectorAll('.buttonChoice');\n\n/* set btnPossibleChoices.length when !type: \"traditional\" */\n// choices array to store all possible choices\nconst choices = [\n  {\n    name: 'rock',\n    image: '✊',\n    key: 'a',\n    value: 'rock',\n    type: 'traditional',\n    index: 0,\n  },\n  {\n    name: 'paper',\n    image: '✋',\n    key: 's',\n    value: 'paper',\n    type: 'traditional',\n    index: 1,\n  },\n  {\n    name: 'scissors',\n    image: '✌️',\n    key: 'd',\n    value: 'scissors',\n    type: 'traditional',\n    index: 2,\n  },\n];\n\n// declare let variables\nlet userChoice; /* \"temporal dead zone\" (TDZ) */\nlet userChoiceValue;\nlet userChoiceResults;\n// * scoreToWin for game to end\nlet scoreToWin = roundsSelections.value;\nconsole.log('🚀 ~ scoreToWin', scoreToWin);\n/* let userChoiceIndex; */\n\n// -----------------------------------------------------------------------------\n\n/* 3 btns, Math.floor() returns Math.random() to the nearest positive integer value */\n// * Returns a random integer => 0<= i <=2\nfunction computerChoice() {\n  const randomNumber = Math.random();\n  const randomChoice = Math.floor(randomNumber * btnPossibleChoices.length);\n  return randomChoice;\n}\n\n// * Filter choices array by user's choice\nfunction fetchUserChoice() {\n  choices.forEach((choice) => {\n    if (userChoiceValue.includes(choice.name || choice.key)) {\n      userChoice = choice.image;\n      const userChoiceIndex = choice.index;\n      userChoiceResults = [userChoice, userChoiceIndex];\n\n      return userChoiceResults;\n    }\n    return userChoiceResults;\n  });\n}\n\n// adds new paragraph choice emoji to DOM /* this can go at the top */\nconst roundResultInsert = document.createElement('p'); // create a new <p> element\n\n/* const createNewPara = () => {\n  roundResultInsert.textContent = userChoice;\n  resultDisplay.appendChild(roundResultInsert);\n}; */\n\n// ! this is breaking everything\nfunction addScoreUpdate(dataScoreSpan) {\n  dataScoreSpan.textContent = parseInt(dataScoreSpan.textContent) + 1;\n}\n\n// todo playGame() could use this\n// * Declare result of a single round\nconst roundResult = (userChoiceIndex, computerChoiceIndex) => {\n  if (userChoiceIndex === computerChoiceIndex) {\n    roundResultInsert.textContent = winAll;\n    resultDisplay.appendChild(roundResultInsert);\n  } else if ((userChoiceIndex + 1) % 3 === computerChoiceIndex) {\n    roundResultInsert.textContent = winComputer;\n    resultDisplay.appendChild(roundResultInsert);\n\n    // dataScoreSpan.textContent = parseInt(dataScoreSpan.textContent) + 1;\n    dataComputerScoreSpan.textContent++; /* use parseInt() here LOL */\n    // computerChoicePara.classList.add('card__choice-result__choice--win');\n  } else {\n    roundResultInsert.textContent = winUser;\n    resultDisplay.appendChild(roundResultInsert);\n    dataUserScoreSpan.textContent++;\n    // addScoreUpdate(dataUserScoreSpan);\n    // userChoicePara.classList.add('card__choice-result__choice--win');\n  }\n};\n\n// increment the score for user & computer => addScoreUpdate(dataScoreSpan)\n\n/* adds most recent choice history of both users */\n// * Function => Adds a new round result to the DOM\nconst playRound = () => {\n  // Create DOM result elements content <p>\n  const userChoicePara = document.createElement('p');\n  const computerChoicePara = document.createElement('p');\n\n  // * Run the random computer choice generator ONLY ONCE HERE\n  const computerChoices = choices[computerChoice()];\n\n  // Retrieve results & map to computer's random number with choices[] array\n  const computerChoiceResults = [computerChoices.image, computerChoices.index];\n\n  // Define the computer results image and index with choices[] array\n  /* const computerChoiceImage = computerChoiceResults[0]; */\n  const computerChoiceIndex = computerChoiceResults[1];\n  // ? would we need a forEach() loop here? if user's increase?\n\n  // add text content & classList 'card__choice-result__choice'\n  userChoicePara.textContent = userChoice;\n  userChoicePara.classList.add('card__choice-result__choice');\n\n  // ! todo think over it\n  /* // add winnwe classList to the winner of the round()\n  if (userChoiceIndex === computerChoiceIndex) {\n    userChoicePara.classList.add('card__choice-result__choice--win');\n  } else {\n    computerChoicePara.classList.add('card__choice-result__choice--win');\n  } */\n\n  // add text content & classList 'card__choice-result__choice'\n  computerChoicePara.textContent = choices[computerChoiceIndex].image;\n  computerChoicePara.classList.add('card__choice-result__choice');\n  // * Insert DOM result elements content <p> before the last <p>\n  userChoiceDisplay.insertBefore(userChoicePara, userChoiceDisplay.firstChild);\n  computerChoiceDisplay.insertBefore(\n    computerChoicePara,\n    computerChoiceDisplay.firstChild,\n  );\n  // * Display result in the DOM UI\n  resultDisplay.textContent = `${userChoiceResults[0]} vs ${computerChoiceResults[0]}`;\n\n  return roundResult(userChoiceResults[1], computerChoiceResults[1]);\n};\n\n// * reset the game when roundSelecions is changed\nconst resetGame = () => {\n  // remove the appended <p> elements\n  userChoiceDisplay.innerHTML = '';\n  computerChoiceDisplay.innerHTML = '';\n  resultDisplay.textContent = '';\n  // * reset the score\n  dataUserScoreSpan.textContent = 0;\n  dataComputerScoreSpan.textContent = 0;\n  // * reset the round\n  roundResultInsert.textContent = '';\n};\n\n// * Function => grab the buttons & for each choice - listen to event\nbtnPossibleChoices.forEach((btnPossibleChoice) => btnPossibleChoice.addEventListener('click', (e) => {\n  userChoiceValue = e.target.value; /* value || key */\n\n  // console.clear();\n  // * filters the userChoice to match the choices array\n  fetchUserChoice();\n  // ? todo think about it => playRound() could go in playGame()\n  // ? but playGame() is for calculating the score and reseting the game\n  // * play round\n  playRound();\n}));\n\nconst playGame = () => {\n  // * play rounds\n  for (let i = 0; i < scoreToWin; i += 1) {\n    // add a if statment here for dataScoreSpan === scoreToWin\n    playRound();\n    if (dataUserScoreSpan.textContent === scoreToWin) {\n      resultDisplay.textContent = winUser;\n      break;\n    } else if (dataComputerScoreSpan.textContent === scoreToWin) {\n      resultDisplay.textContent = winComputer;\n      break;\n    } else {\n      resultDisplay.textContent = winAll;\n    }\n  }\n  resetGame();\n};\n\n// get rounds value set by the user (default is 5)\nroundsSelections.addEventListener('change', (e) => {\n  scoreToWin = e.target.value;\n  console.log('🚀 ~ scoreToWin', scoreToWin);\n  // * reset the game when scoreToWin value is changed\n  resetGame();\n  return scoreToWin;\n});\n\n// reset game when rounds are over\n/* const roundsNumber = parseInt(rounds); const roundsArray = [];\nfor (let i = 0; i < roundsNumber; i++) {roundsArray.push playRound());} */\n\n// -----------------------------------------------------------------------------\n\n// function to play a game of round = rounds from user input in #roundsSelections\n// const game = () => {\n//   let round = 0;\n//   let userScore = 0;\n//   let computerScore = 0;\n//   for (let i = 0; i < 5; i++) {\n//     playRound();\n//     round++;\n//     if (round % 2 === 0) {\n//       userScore++;\n//     } else {\n//       computerScore++;\n//     }\n//   }\n// };\n\n// -----------------------------------------------------------------------------\n/* const computerChoiceResults = [\n      choices[computerChoice()].image,\n      choices[computerChoice()].index,\n    ]; */\n\n// const computerChoiceIndexResult = choices[computerChoice()].index;\n// const computerChoiceImageResult = choices[computerChoice()].image;\n\n// resultDisplay.insertBefore(roundResultInsert, resultDisplay.firstChild); /* **** */\n\n//  --------------------------------------------------------------------\n\n/* function game() {\n  const rounds = roundsSelections.value;\n  rounds = 3;\n  for (let i = 0; i < rounds; i++) {\n    playRound();\n  }\n} */\n\n/* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#a_stricter_parse_function */\n/* function parseInt(string: string, radix?: number): number */\n/* if radix is not specified, it defaults to base 10 (decimal) else base 16 (hexadecimal) */\n/* A value between 2 and 36 that specifies the base of the number in string.\n  If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\n  All other strings are considered decimal. */\n"]}