{"version":3,"sources":["app.js"],"names":["userChoice","userChoiceValue","userChoiceResults","winUser","winComputer","winAll","userChoiceDisplay","document","getElementById","computerChoiceDisplay","resultDisplay","dataUserScoreSpan","querySelector","dataComputerScoreSpan","btnPossibleChoices","querySelectorAll","choices","name","image","key","value","type","index","computerChoice","randomNumber","Math","random","floor","length","fetchUserChoice","forEach","choice","includes","userChoiceIndex","roundResultInsert","createElement","roundResult","computerChoiceIndex","textContent","appendChild","playRound","userChoicePara","computerChoicePara","computerChoices","computerChoiceResults","classList","add","insertBefore","firstChild","concat","btnPossibleChoice","addEventListener","e","target"],"mappings":"AAAA,aAKA,IA+CIA,WACAC,gBACAC,kBAjDEC,QAAU,UACVC,YAAc,gBACdC,OAAS,6BAITC,kBAAoBC,SAASC,eAAe,qBAC5CC,sBAAwBF,SAASC,eAAe,yBAChDE,cAAgBH,SAASC,eAAe,iBACxCG,kBAAoBJ,SAASK,cAAc,qBAC3CC,sBAAwBN,SAASK,cAAc,yBAK/CE,mBAAqBP,SAASQ,iBAAiB,iBAI/CC,QAAU,CACd,CACEC,KAAM,OACNC,MAAO,IACPC,IAAK,IACLC,MAAO,OACPC,KAAM,cACNC,MAAO,GAET,CACEL,KAAM,QACNC,MAAO,IACPC,IAAK,IACLC,MAAO,QACPC,KAAM,cACNC,MAAO,GAET,CACEL,KAAM,WACNC,MAAO,KACPC,IAAK,IACLC,MAAO,WACPC,KAAM,cACNC,MAAO,IAcX,SAASC,iBACP,IAAMC,EAAeC,KAAKC,SAE1B,OADqBD,KAAKE,MAAMH,EAAeV,mBAAmBc,QAKpE,SAASC,kBACPb,QAAQc,SAAQ,SAACC,GACf,GAAI9B,gBAAgB+B,SAASD,EAAOd,MAAQc,EAAOZ,KAAM,CACvDnB,WAAa+B,EAAOb,MACpB,IAAMe,EAAkBF,EAAOT,MAG/B,OAFApB,kBAAoB,CAACF,WAAYiC,GAInC,OAAO/B,qBAKX,IAAMgC,kBAAoB3B,SAAS4B,cAAc,KAG3CC,YAAc,SAACH,EAAiBI,GAChCJ,IAAoBI,IACtBH,kBAAkBI,YAAcjC,OAChCK,cAAc6B,YAAYL,oBAEJ,IAApBD,GAAiD,IAAxBI,IAC3BH,kBAAkBI,YAAclC,YAChCM,cAAc6B,YAAYL,oBAEJ,IAApBD,GAAiD,IAAxBI,IAC3BH,kBAAkBI,YAAcnC,QAChCO,cAAc6B,YAAYL,oBAEJ,IAApBD,GAAiD,IAAxBI,IAC3BH,kBAAkBI,YAAclC,YAChCM,cAAc6B,YAAYL,oBAEJ,IAApBD,GAAiD,IAAxBI,IAC3BH,kBAAkBI,YAAcnC,QAChCO,cAAc6B,YAAYL,oBAEJ,IAApBD,GAAiD,IAAxBI,IAC3BH,kBAAkBI,YAAclC,YAChCM,cAAc6B,YAAYL,oBAEJ,IAApBD,GAAiD,IAAxBI,IAC3BH,kBAAkBI,YAAcnC,QAChCO,cAAc6B,YAAYL,qBAexBM,UAAY,WAEhB,IAAMC,EAAiBlC,SAAS4B,cAAc,KACxCO,EAAqBnC,SAAS4B,cAAc,KAG5CQ,EAAkB3B,QAAQO,kBAG1BqB,EAAwB,CAACD,EAAgBzB,MAAOyB,EAAgBrB,OAIhEe,EAAsBO,EAAsB,GA2BlD,OAvBAH,EAAeH,YAActC,WAC7ByC,EAAeI,UAAUC,IAAI,+BAW7BJ,EAAmBJ,YAActB,QAAQqB,GAAqBnB,MAC9DwB,EAAmBG,UAAUC,IAAI,+BAEjCxC,kBAAkByC,aAAaN,EAAgBnC,kBAAkB0C,YACjEvC,sBAAsBsC,aACpBL,EACAjC,sBAAsBuC,YAGxBtC,cAAc4B,YAAd,GAAAW,OAA+B/C,kBAAkB,GAAjD,QAAA+C,OAA0DL,EAAsB,IAEzER,YAAYlC,kBAAkB,GAAI0C,EAAsB,KAIjE9B,mBAAmBgB,SAAQ,SAACoB,GAAD,OAAuBA,EAAkBC,iBAAiB,SAAS,SAACC,GAC7FnD,gBAAkBmD,EAAEC,OAAOjC,MAG3BS,kBAGAW","file":"app.js","sourcesContent":["/* $ ./node_modules/.bin/eslint --fix src/js/app.js */\n\n/* declare and intialize const variables => always const before let */\n\n// set result statement\nconst winUser = 'You win';\nconst winComputer = 'Computer wins';\nconst winAll = \"It's a tie! Everyone Wins!\";\n/* const tieAllImage = '🫶 '; */ /* https://emojipedia.org/heart-hands/ */\n\n// get DOM elements by id\nconst userChoiceDisplay = document.getElementById('userChoiceDisplay');\nconst computerChoiceDisplay = document.getElementById('computerChoiceDisplay');\nconst resultDisplay = document.getElementById('resultDisplay');\nconst dataUserScoreSpan = document.querySelector('[data-user-score]');\nconst dataComputerScoreSpan = document.querySelector('[data-computer-score]');\n\n/* const roundsSelections = document.getElementById('roundsSelections'); */\n\n// select all buttons with class of buttonChoice\nconst btnPossibleChoices = document.querySelectorAll('.buttonChoice');\n\n/* set btnPossibleChoices.length when !type: \"traditional\" */\n// choices array to store all possible choices\nconst choices = [\n  {\n    name: 'rock',\n    image: '✊',\n    key: 'a',\n    value: 'rock',\n    type: 'traditional',\n    index: 0,\n  },\n  {\n    name: 'paper',\n    image: '✋',\n    key: 's',\n    value: 'paper',\n    type: 'traditional',\n    index: 1,\n  },\n  {\n    name: 'scissors',\n    image: '✌️',\n    key: 'd',\n    value: 'scissors',\n    type: 'traditional',\n    index: 2,\n  },\n];\n\n// declare let variables\nlet userChoice; /* \"temporal dead zone\" (TDZ) */\nlet userChoiceValue;\nlet userChoiceResults;\n/* let userChoiceIndex; */\n\n// -----------------------------------------------------------------------------\n\n/* 3 btns, Math.floor() returns Math.random() to the nearest positive integer value */\n// * Returns a random integer => 0<= i <=2\nfunction computerChoice() {\n  const randomNumber = Math.random();\n  const randomChoice = Math.floor(randomNumber * btnPossibleChoices.length);\n  return randomChoice;\n}\n\n// * Filter choices array by user's choice\nfunction fetchUserChoice() {\n  choices.forEach((choice) => {\n    if (userChoiceValue.includes(choice.name || choice.key)) {\n      userChoice = choice.image;\n      const userChoiceIndex = choice.index;\n      userChoiceResults = [userChoice, userChoiceIndex];\n\n      return userChoiceResults;\n    }\n    return userChoiceResults;\n  });\n}\n\n// ? insert this in roundResult() function\nconst roundResultInsert = document.createElement('p'); // create a new <p> element\n\n// * Declare result of a single round\nconst roundResult = (userChoiceIndex, computerChoiceIndex) => {\n  if (userChoiceIndex === computerChoiceIndex) {\n    roundResultInsert.textContent = winAll;\n    resultDisplay.appendChild(roundResultInsert);\n  }\n  if (userChoiceIndex === 0 && computerChoiceIndex === 1) {\n    roundResultInsert.textContent = winComputer;\n    resultDisplay.appendChild(roundResultInsert);\n  }\n  if (userChoiceIndex === 1 && computerChoiceIndex === 0) {\n    roundResultInsert.textContent = winUser;\n    resultDisplay.appendChild(roundResultInsert);\n  }\n  if (userChoiceIndex === 1 && computerChoiceIndex === 2) {\n    roundResultInsert.textContent = winComputer;\n    resultDisplay.appendChild(roundResultInsert);\n  }\n  if (userChoiceIndex === 2 && computerChoiceIndex === 1) {\n    roundResultInsert.textContent = winUser;\n    resultDisplay.appendChild(roundResultInsert);\n  }\n  if (userChoiceIndex === 2 && computerChoiceIndex === 0) {\n    roundResultInsert.textContent = winComputer;\n    resultDisplay.appendChild(roundResultInsert);\n  }\n  if (userChoiceIndex === 0 && computerChoiceIndex === 2) {\n    roundResultInsert.textContent = winUser;\n    resultDisplay.appendChild(roundResultInsert);\n  }\n};\n\n// addScoreUpdate = (dataScoreSpan) => {\n//   // pasrseInt(string, radix) returns the integer value represented by the specified string\n//   dataScoreSpan.textContent = parseInt(dataScoreSpan.textContent) + 1;\n// }; /* don't need to declare variable in a function when it's the parameter? */\n\n// // increment the score for user & computer => addScoreUpdate(dataScoreSpan)\n// addScoreUpdate(dataUserScoreSpan);\n// addScoreUpdate(dataComputerScoreSpan);\n\n/* adds most recent choice history of both users */\n// * Function => Adds a new round result to the DOM\nconst playRound = () => {\n  // Create DOM result elements content <p>\n  const userChoicePara = document.createElement('p');\n  const computerChoicePara = document.createElement('p');\n\n  // * Run the random computer choice generator ONLY ONCE HERE\n  const computerChoices = choices[computerChoice()];\n\n  // Retrieve results & map to computer's random number with choices[] array\n  const computerChoiceResults = [computerChoices.image, computerChoices.index];\n\n  // Define the computer results image and index with choices[] array\n  /* const computerChoiceImage = computerChoiceResults[0]; */\n  const computerChoiceIndex = computerChoiceResults[1];\n  // ? would we need a forEach() loop here? if user's increase?\n\n  // add text content & classList 'card__choice-result__choice'\n  userChoicePara.textContent = userChoice;\n  userChoicePara.classList.add('card__choice-result__choice');\n\n  // ! todo think over it\n  /* // add winnwe classList to the winner of the round()\n  if (userChoiceIndex === computerChoiceIndex) {\n    userChoicePara.classList.add('card__choice-result__choice--win');\n  } else {\n    computerChoicePara.classList.add('card__choice-result__choice--win');\n  } */\n\n  // add text content & classList 'card__choice-result__choice'\n  computerChoicePara.textContent = choices[computerChoiceIndex].image;\n  computerChoicePara.classList.add('card__choice-result__choice');\n  // * Insert DOM result elements content <p> before the last <p>\n  userChoiceDisplay.insertBefore(userChoicePara, userChoiceDisplay.firstChild);\n  computerChoiceDisplay.insertBefore(\n    computerChoicePara,\n    computerChoiceDisplay.firstChild,\n  );\n  // * Display result in the DOM UI\n  resultDisplay.textContent = `${userChoiceResults[0]} vs ${computerChoiceResults[0]}`;\n\n  return roundResult(userChoiceResults[1], computerChoiceResults[1]);\n};\n\n// * Function => grab the buttons & for each choice - listen to event\nbtnPossibleChoices.forEach((btnPossibleChoice) => btnPossibleChoice.addEventListener('click', (e) => {\n  userChoiceValue = e.target.value; /* value || key */\n  /* console.clear(); */\n  // * filters the userChoice to match the choices array\n  fetchUserChoice();\n\n  // * play round\n  playRound();\n}));\n\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n\n/* const computerChoiceResults = [\n      choices[computerChoice()].image,\n      choices[computerChoice()].index,\n    ]; */\n\n// const computerChoiceIndexResult = choices[computerChoice()].index;\n// const computerChoiceImageResult = choices[computerChoice()].image;\n\n// resultDisplay.insertBefore(roundResultInsert, resultDisplay.firstChild); /* **** */\n\n//  --------------------------------------------------------------------\n\n/* function game() {\n  const rounds = roundsSelections.value;\n  rounds = 3;\n  for (let i = 0; i < rounds; i++) {\n    playRound();\n  }\n} */\n\n//  --------------------------------------------------------------------\n\n/* const roundResult = (userChoiceIndex, computerChoiceIndex) => {\n  if (userChoiceIndex === computerChoiceIndex) {\n    console.log(winAll);\n    roundResultInsert.textContent = winAll;\n    resultDisplay.appendChild(roundResultInsert);\n  }\n  if ((userChoiceIndex + 1) % 3 === computerChoiceIndex) {\n    console.log(winComputer);\n    roundResultInsert.textContent = winComputer;\n    resultDisplay.appendChild(roundResultInsert);\n  } else {\n    console.log(winUser);\n    roundResultInsert.textContent = winUser;\n    resultDisplay.appendChild(roundResultInsert);\n  }\n}; */\n\n/* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#a_stricter_parse_function */\n/* function parseInt(string: string, radix?: number): number */\n/* if radix is not specified, it defaults to base 10 (decimal) else base 16 (hexadecimal) */\n/* A value between 2 and 36 that specifies the base of the number in string.\n  If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\n  All other strings are considered decimal. */\n"]}