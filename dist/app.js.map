{"version":3,"sources":["app.js"],"names":["userChoiceValue","userChoice","computerChoiceDisplay","document","getElementById","userChoiceDisplay","resultDisplay","btnPossibleChoices","querySelectorAll","computerChoice","randomNumber","Math","random","floor","length","choices","name","image","key","value","type","index","winUser","winComputer","winAll","fetchUserChoice","forEach","choice","includes","playRound","computerChoiceIndex","userChoicePara","createElement","computerChoicePara","textContent","insertBefore","firstChild","concat","roundResultInsert","roundResult","userChoiceIndex","btnPossibleChoice","addEventListener","e","target","code"],"mappings":"AAAA,aAIA,IAqDIA,gBAEAC,WAvDEC,sBAAwBC,SAASC,eAAe,yBAChDC,kBAAoBF,SAASC,eAAe,qBAC5CE,cAAgBH,SAASC,eAAe,iBAGxCG,mBAAqBJ,SAASK,iBAAiB,iBAI/CC,eAAiB,WACrB,IAAMC,EAAeC,KAAKC,SAE1B,OADqBD,KAAKE,MAAMH,EAAeH,mBAAmBO,SAM9DC,QAAU,CACd,CACEC,KAAM,OACNC,MAAO,IACPC,IAAK,IACLC,MAAO,OACPC,KAAM,cACNC,MAAO,GAET,CACEL,KAAM,QACNC,MAAO,IACPC,IAAK,IACLC,MAAO,QACPC,KAAM,cACNC,MAAO,GAET,CACEL,KAAM,WACNC,MAAO,KACPC,IAAK,IACLC,MAAO,WACPC,KAAM,cACNC,MAAO,IAOLC,QAAU,UACVC,YAAc,gBACdC,OAAS,6BAyCTC,gBAAkB,WACtBV,QAAQW,SAAQ,SAACC,GACf,GAAI3B,gBAAgB4B,SAASD,EAAOX,MAAQW,EAAOT,KAGjD,OAFAjB,WAAa0B,EAAOV,MACIU,EAAON,UAO/BQ,UAAY,WAChB,IAAMC,EAAsBrB,iBACtBsB,EAAiB5B,SAAS6B,cAAc,KACxCC,EAAqB9B,SAAS6B,cAAc,KAElDD,EAAeG,YAAcjC,WAC7BgC,EAAmBC,YAAcnB,QAAQe,GAAqBb,MAE9DZ,kBAAkB8B,aAAaJ,EAAgB1B,kBAAkB+B,YACjElC,sBAAsBiC,aACpBF,EACA/B,sBAAsBkC,YAGxB9B,cAAc4B,YAAd,GAAAG,OAA+BpC,WAA/B,QAAAoC,OAAgDJ,EAAmBC,cAI/DI,kBAAoBnC,SAAS6B,cAAc,KAI3CO,YAAc,SAACC,EAAiBV,GAAlB,OAChBQ,kBAAkBJ,YADyCM,IAAoBV,EAC/CN,QAC/BgB,EAAkB,GAAK,IAAMV,EACIP,YACAD,SAGtCf,mBAAmBmB,SAAQ,SAACe,GAAD,OAAuBA,EAAkBC,iBAAiB,SAAsB,SAACC,GAC1G3C,gBAAkB2C,EAAEC,OAAOzB,OAASwB,EAAEC,OAAOC,KAC7CpB,kBACAI,YACAU","file":"app.js","sourcesContent":["// $ ./node_modules/.bin/eslint --fix src/js/app.js\n// use eslint in tandem with prettier\n\n// get DOM elements by id\nconst computerChoiceDisplay = document.getElementById('computerChoiceDisplay');\nconst userChoiceDisplay = document.getElementById('userChoiceDisplay');\nconst resultDisplay = document.getElementById('resultDisplay');\n// const roundsSelections = document.getElementById('roundsSelections');\n// select all buttons with class of buttonChoice\nconst btnPossibleChoices = document.querySelectorAll('.buttonChoice');\n\n// returns a random integer => 0<= i <=2\n/* 3 btns, Math.floor() returns Math.random() to the nearest positive integer value */\nconst computerChoice = () => {\n  const randomNumber = Math.random();\n  const randomChoice = Math.floor(randomNumber * btnPossibleChoices.length);\n  return randomChoice;\n};\n\n// btnPossibleChoices.length can be set when something apart from type: \"traditional\" is set.\n/* [rock, paper, scissors, lizard, spock] */\nconst choices = [\n  {\n    name: 'rock',\n    image: '✊',\n    key: 'a',\n    value: 'rock',\n    type: 'traditional',\n    index: 0,\n  },\n  {\n    name: 'paper',\n    image: '✋',\n    key: 's',\n    value: 'paper',\n    type: 'traditional',\n    index: 1,\n  },\n  {\n    name: 'scissors',\n    image: '✌️',\n    key: 'd',\n    value: 'scissors',\n    type: 'traditional',\n    index: 2,\n  },\n]; /* if user selects mode apart from traditional */ /* add that type's image as button innerHTML */\n\n// console.log('🚀 ~ choices[0].key', choices[0].key);\n// -----------------------------------------------------------------------------\n// set result statement\nconst winUser = 'You win';\nconst winComputer = 'Computer wins';\nconst winAll = \"It's a tie! Everyone Wins!\";\n// const tieAllImage = '🫶 '; /* https://emojipedia.org/heart-hands/ */\n\n// -----------------------------------------------------------------------------\nlet userChoiceValue;\n// let userChoiceIndex;\nlet userChoice;\n\n// -----------------------------------------------------------------------------\n// let userKeydownChoiceKey;\n// let userKeydownChoiceCode;\n\n// ---------------------\n/* if (userChoiceValue.includes(choice.name)) {\n//       userChoice = choice.index;\n//       return userChoice;\n//     } */\n\n// function listense to window keydown keyboard strokes\n/* [choices].key => [0] rock -a [1] paper -s [2] scissors - d */\n// window.addEventListener(\n//   'keydown',\n//   (e) => {\n//     userKeydownChoiceKey = e.key;\n//     userKeydownChoiceCode = e.code;\n//     // console.log(userKeydownChoiceKey, userKeydownChoiceCode);\n\n//     // set keys with choices\n//     /* choices.forEach((choice) => {\n//       let userChoiceKey = userKeydownChoiceKey;\n//       console.log(\"🚀 ~ choices.forEach ~ userChoiceKey\", userChoiceKey);\n//       if (userChoiceKey.includes(choices[choice].key)) {\n//         // then click that button withh the choice key index\n//       }\n//     }); */\n//     // return userKeydownChoiceKey;\n//   },\n//   true,\n// );\n\n// -----------------------------------------------------------------------------\nconst fetchUserChoice = () => {\n  choices.forEach((choice) => {\n    if (userChoiceValue.includes(choice.name || choice.key)) {\n      userChoice = choice.image;\n      const userChoiceIndex = choice.index;\n      return userChoice, userChoiceIndex;\n    }\n  });\n};\n\n// -----------------------------------------------------------------------------\nconst playRound = () => {\n  const computerChoiceIndex = computerChoice(); /* generate computer Index */\n  const userChoicePara = document.createElement('p');\n  const computerChoicePara = document.createElement('p');\n\n  userChoicePara.textContent = userChoice;\n  computerChoicePara.textContent = choices[computerChoiceIndex].image;\n\n  userChoiceDisplay.insertBefore(userChoicePara, userChoiceDisplay.firstChild);\n  computerChoiceDisplay.insertBefore(\n    computerChoicePara,\n    computerChoiceDisplay.firstChild,\n  ); /* https://stackoverflow.com/questions/23749464/reverse-the-order-of-elements-added-to-dom-with-javascript */\n\n  resultDisplay.textContent = `${userChoice} vs ${computerChoicePara.textContent}`;\n};\n\n// insert a <p> element below resultDisplay\nconst roundResultInsert = document.createElement('p');\n\n// -----------------------------------------------------------------------------\n// function to declare result of a single round\nconst roundResult = (userChoiceIndex, computerChoiceIndex) => (userChoiceIndex === computerChoiceIndex\n  ? roundResultInsert.textContent = winAll\n  : (userChoiceIndex + 1) % 3 === computerChoiceIndex\n    ? roundResultInsert.textContent = winComputer\n    : roundResultInsert.textContent = winUser);\n\n// grab the buttons and for each possible choice\nbtnPossibleChoices.forEach((btnPossibleChoice) => btnPossibleChoice.addEventListener('click' || 'keydown', (e) => {\n  userChoiceValue = e.target.value || e.target.code; /* change it to value or id? */\n  fetchUserChoice();\n  playRound();\n  roundResult();\n  // resultDisplay.insertBefore(roundResultInsert, resultDisplay.firstChild);\n}));\n\n// ! revise it to ternary operator\n/* const roundResult = (userChoiceIndex, computerChoiceIndex) => {\n  if (userChoiceIndex === computerChoiceIndex) {\n    console.log(winAll);\n    roundResultInsert.textContent = winAll;\n    resultDisplay.appendChild(roundResultInsert);\n  } else if ((userChoiceIndex + 1) % 3 === computerChoiceIndex) {\n    console.log(winComputer);\n    roundResultInsert.textContent = winComputer;\n    resultDisplay.appendChild(roundResultInsert);\n  } else {\n    console.log(winUser);\n    roundResultInsert.textContent = winUser;\n    resultDisplay.appendChild(roundResultInsert);\n  }\n}; */\n// -----------------------------------------------------------------------------\n\n/*\nhttps://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code\n*/\n// Key Event => key: a & code: KeyA\n// Key Event => key: s & code: KeyS\n// Key Event => key: d & code: KeyD\n\n// const choicesKeyboardKeys = [\n//   \"a\",\n//   \"s\",\n//   \"d\",\n// ]; /* quick keyboard shortcuts for web users */\n\n/* choices.forEach((choice) => {\n  const result = choice.key;\n  const resultString = JSON.stringify(result);\n  // const resultStringArray = resultString.map();\n  console.log(\"🚀 ~ choices.forEach ~ resultString\", resultString);\n}); */\n\n// const { userKeydownChoiceKey, userKeydownChoiceCode } = keydown;\n\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n/* window.addEventListener(\n  \"keydown\",\n  (event) => {\n    let keydownChoiceKey = event.key;\n    let keydownChoiceCode = event.code;\n    const keydownPara = document.createElement(\"p\");\n    keydownPara.textContent = `Key Event => key: ${keydownChoiceKey} & code: ${keydownChoiceCode}`;\n    const keydownOutputDisplay = document.getElementById(\n      \"keydownOutputDisplay\"\n    );\n    keydownOutputDisplay.appendChild(keydownPara);\n    // console.log(\"🚀 ~ keydownChoiceCode\", keydownChoiceKey);\n    return keydownChoiceKey;\n  },\n  true\n); */\n\n// scoring logic for scalability /* later replace 3 with choices.length */\n/*\nRock = 0\nPaper = 1\nScissors = 2\n */\n/*\nelse if ((userChoiceIndex + 1) % 3 === computerChoiceIndex)\n-----------------------------------------------------------\n#1. u: Rock(0) c: Paper(1)\n(0 + 1) % 3 === 1 # => winComputer\n1 modulo 3 => 1\n1 = (3 * 0) + 1\n\n#2. u: Paper(1) c: Scissors(2)\n(1 + 1) % 3 === 2  # => winComputer\n2 modulo 3 => 2\n2 = (3 * 0) + 2\n\n#3. u: Scissors(2) c: Rock(0)\n(2 + 1) % 3 === 0  # => winComputer\n3 modulo 3 => 0\n3 = (3 * 1) + 0\n*/\n/* const getRoundResult = (userChoice, computerChoice) => {\n}; */\n\n/* const getResults = (userChoice, computerChoice) => {\n  switch (userChoice + computerChoice) {\n    case \"rockscissors\":\n    case \"scissorspaper\":\n    case \"paperrock\":\n      choicesDisplayResult.innerHTML =\n        `You chose: ${userChoice} & Computer chose: ${computerChoice}. YOU SUCCEEDED!`;\n      break;\n    case \"rockpaper\":\n    case \"paperscissors\":\n    case \"scissorsrock\":\n      choicesDisplayResult.innerHTML =\n        `You chose: ${userChoice} & Computer chose: ${computerChoice}. COMPUTER SUCCEEDED!`;\n      break;\n    case \"rockrock\":\n    case \"paperpaper\":\n    case \"scissorscissors\":\n      choicesDisplayResult.innerHTML =\n        `You chose: ${userChoice} & Computer chose: ${computerChoice}. EVERYONE SUCCEEDED!`;\n      break;\n  }\n}; */\n\n// -------------------------------------------------------------\\\\\n// 20220419161140\n/* const gameGrid = document.getElementById(\"gameGrid\");\ngameGrid.append(userChoiceDisplay, computerChoiceDisplay, resultDisplay); */\n\n/* const handleClick = (e) => {\n  userChoice = e.target.innerHTML;\n  userChoiceDisplay.innerHTML = `User Choice: ${userChoice}`;\n  generateComputerChoice();\n  getResults();\n}; */\n\n/* const generateComputerChoice = () => {\n  const randomChoice = Math.floor(Math.random() * choices.length);\n  computerChoice = randomChoice;\n  computerChoiceDisplay.innerHTML = `Computer Choice: ${computerChoice}`;\n}; */\n\n/* for (let i = 0; i < choices.length; i++) {\n  const button = document.createElement(\"button\");\n  button.id =\n    choices[i];\n    // delete id for using e.target.innerHTML in the hanleClick()\n  button.addEventListener(\"click\", handleClick);\n  gameGrid.appendChild(button);\n} */\n\n// results\n/* const getResults = (userChoice, computerChoice) => {\n  switch (userChoice + computerChoice) {\n    case \"rockscissors\":\n    case \"scissorspaper\":\n    case \"paperrock\":\n      choicesDisplayResult.innerHTML =\n      `You chose: ${userChoice} & Computer chose: ${computerChoice}. YOU SUCCEEDED!`;\n      break;\n    case \"rockpaper\":\n    case \"paperscissors\":\n    case \"scissorsrock\":\n      choicesDisplayResult.innerHTML =\n      `You chose: ${userChoice} & Computer chose: ${computerChoice}. COMPUTER SUCCEEDED!`;\n      break;\n    case \"rockrock\":\n    case \"paperpaper\":\n    case \"scissorscissors\":\n      choicesDisplayResult.innerHTML =\n      `You chose: ${userChoice} & Computer chose: ${computerChoice}. EVERYONE SUCCEEDED!`;\n      break;\n  }\n}; */\n\n// -------------------------------------------------------------\\\\\n// let roundsUserSelectValue;\n\n// roundsSelections.addEventListener(\"click\", (e) => {\n//   roundsUserSelectValue = e.target.value;\n//   console.log(roundsUserSelectValue);\n// }); /* fix the logic to display option value when clicked - check semantic mdn */\n\n// roundsSelections.forEach((roundSelection) =>\n//   roundsSelection.addEventListener(\"click\", (e) => {\n//     console.log(e.target.value);\n//   })\n// );\n\n// let winner = () => {\n//   choices.forEach((choice) => {\n//     if (userChoiceValue.includes(choice.name)) {\n//       userChoice = choice.index;\n//       return userChoice;\n//     }\n//   });\n//   // add btn\n// };\n\n// const playGame = () => {\n//   for (let round = 0; round < array.length; round++) {\n//     const element = array[round];\n//   }\n// };\n\n// console.log(choices[0].image);\n\n// listen to key strokes 'a' 's' 'd'\n// a = inline-start(rock); b = center(paper); d = inline-end(scissors\n// let userKeyStrokes;\n\n// pseudo code\n// let keys = [a,s,d];\n// keys.value.append = {rock, paper, scissors}\n\n// let choicesResult = choices.groupBy(({ type }) => type);\n// console.log(choicesResult.traditional);\n\n// console.log(`These are the choices:\\n${choicesArray}`);\n// forEach userKeyStrokes([a,s,d])\n// userKeyStrokes.addEventListener(\"[\")\n"]}