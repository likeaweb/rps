{"version":3,"sources":["theme-toggle.js"],"names":["btnToggleTheme","document","getElementById","getUserColorPreference","localStorage","getItem","window","matchMedia","matches","theme","value","reflectPreference","firstElementChild","setAttribute","updateColorPreference","setItem","onload","addEventListener","_ref","isDark"],"mappings":"AAAA,aAMA,IAAMA,eAAiBC,SAASC,eAAe,eASzCC,uBAAyB,WAE7B,OAAIC,aAAaC,QAAQ,oBAA4BD,aAAaC,QAAQ,oBACnEC,OAAOC,WAAW,gCAAgCC,QACrD,OACA,SAMAC,MAAQ,CACZC,MAAOP,0BAWHQ,kBAAoB,WACxBV,SAASW,kBAAkBC,aAAa,aAAcJ,MAAMC,OAC5DV,MAAAA,gBAAAA,eAAgBa,aAAa,YAAaJ,MAAMC,QAS5CI,sBAAwB,WAC5BV,aAAaW,QAAQ,mBAAoBN,MAAMC,OAC/CC,qBAUFL,OAAOU,OAAS,WAEdL,oBAEAX,eAAeiB,iBAAiB,SAAS,WACvCR,MAAMC,MAAwB,UAAhBD,MAAMC,MAAoB,OAAS,QAEjDI,4BAQJH,oBAOAL,OACGC,WAAW,gCACXU,iBAAiB,UAAU,SAAAC,GAAyB,IAAbC,EAAaD,EAAtBV,QAC7BC,MAAMC,MAAQS,EAAS,OAAS,QAChCL","file":"theme-toggle.js","sourcesContent":["// toggle theme setup\n\n// get toggleTheme object\n/**\n * @param  {} \"toggleTheme\"\n */\nconst btnToggleTheme = document.getElementById('toggleTheme');\n\n// get user color preference\n/**\n * @param  {} =>{if(localStorage.getItem(\"theme-preference\"\n * @param  {} returnlocalStorage.getItem(\"theme-preference\"\n * @param  {dark} ;elsereturnwindow.matchMedia(\"(prefers-color-scheme\n * @returns light\n */\nconst getUserColorPreference = () => {\n  // fetch theme preference from local storage of user\n  if (localStorage.getItem('theme-preference')) return localStorage.getItem('theme-preference');\n  return window.matchMedia('(prefers-color-scheme: dark)').matches\n    ? 'dark'\n    : 'light';\n};\n\n/**\n * @param  {} =>{theme.value=getUserColorPreference();\n */\nconst theme = {\n  value: getUserColorPreference(),\n};\n\n// sets data-theme to them.value, sets aria-live to 'light' or 'dark'\n// function to get toggleTheme DOM element\n/**\n * @param  {} =>{document.firstElementChild.setAttribute(\"data-theme\"\n * @param  {} theme.value\n * @param  {} ;btnToggleTheme?.setAttribute(\"aria-live\"\n * @param  {} theme.value\n */\nconst reflectPreference = () => {\n  document.firstElementChild.setAttribute('data-theme', theme.value);\n  btnToggleTheme?.setAttribute('aria-live', theme.value);\n};\n\n// function sets up color preference /*  */\n/**\n * @param  {} =>{localStorage.setItem(\"theme-preference\"\n * @param  {} theme.value\n * @param  {} ;reflectPreference(\n */\nconst updateColorPreference = () => {\n  localStorage.setItem('theme-preference', theme.value);\n  reflectPreference(); /* is this a return? arrow-function */\n};\n\n// add event listener to toggleTheme button\n/**\n * @param  {} =>{reflectPreference(\n * @param  {} ;btnToggleTheme.addEventListener(\"click\"\n * @param  {} (e\n * @param  {\"light\";updateColorPreference(} =>{theme.value=theme.value===\"light\"?\"dark\"\n */\nwindow.onload = () => {\n  // inform screen readers the button value on loading\n  reflectPreference();\n\n  btnToggleTheme.addEventListener('click', () => {\n    theme.value = theme.value === 'light' ? 'dark' : 'light';\n\n    updateColorPreference();\n  });\n};\n\n// avoid page flashes on load by setting preference early\n/**\n * @param  {} =>{theme.value=getUserColorPreference();\n */\nreflectPreference();\n\n// end toggle theme setup\n// add event listener to matchMedia\n/**\n * @param  {dark} \"(prefers-color-scheme\n */\nwindow\n  .matchMedia('(prefers-color-scheme: dark)')\n  .addEventListener('change', ({ matches: isDark }) => {\n    theme.value = isDark ? 'dark' : 'light';\n    updateColorPreference();\n  });\n"]}